# version: "3"
# services:
#   mongo:
#     image: mongo:lastest
#     command: mongod --replSet rs0
#   mongo:
#     image: mongo:lastest
#     command: mongod --replSet rs0
#   mongo:
#     image: mongo:lastest
#     command: mongod --replSet rs0
version: "3"
services:
  sd1:
    image: mongo
    ports:
      - "27018:27017"
    command: mongod --replSet shard1
    restart: always
  sd2:
    image: mongo
    ports:
      - "27019:27017"
    command: mongod --replSet shard2
    restart: always
  sd3:
    image: mongo
    ports:
      - "27020:27017"
    command: mongod --replSet shard3
    restart: always
# mongo-rs1-setup:
#     container_name: "mongo-rs1-setup"
#     image: mongo
#     depends_on:
#         - "mongo-1-1"
#         - "mongo-1-2"
#         - "mongo-1-3"
#     links:
#         - mongo-1-1:mongo-1-1
#         - mongo-1-2:mongo-1-2
#         - mongo-1-3:mongo-1-3
#     volumes:
#         - ./scripts:/scripts
#     environment: 
#         - MONGO1=mongo-1-1
#         - MONGO2=mongo-1-2
#         - MONGO3=mongo-1-3
#         - RS=rs1
#     entrypoint: [ "/scripts/setup.sh" ]


# version: "3"
# services:

#   redis:
#     image: redis:alpine
#     ports:
#       - "6379"
#     networks:
#       - frontend
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   db:
#     image: postgres:9.4
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     networks:
#       - backend
#     deploy:
#       placement:
#         constraints: [node.role == manager]

#   vote:
#     image: dockersamples/examplevotingapp_vote:before
#     ports:
#       - 5000:80
#     networks:
#       - frontend
#     depends_on:
#       - redis
#     deploy:
#       replicas: 2
#       update_config:
#         parallelism: 2
#       restart_policy:
#         condition: on-failure

#   result:
#     image: dockersamples/examplevotingapp_result:before
#     ports:
#       - 5001:80
#     networks:
#       - backend
#     depends_on:
#       - db
#     deploy:
#       replicas: 1
#       update_config:
#         parallelism: 2
#         delay: 10s
#       restart_policy:
#         condition: on-failure

#   worker:
#     image: dockersamples/examplevotingapp_worker
#     networks:
#       - frontend
#       - backend
#     deploy:
#       mode: replicated
#       replicas: 1
#       labels: [APP=VOTING]
#       restart_policy:
#         condition: on-failure
#         delay: 10s
#         max_attempts: 3
#         window: 120s
#       placement:
#         constraints: [node.role == manager]

#   visualizer:
#     image: dockersamples/visualizer:stable
#     ports:
#       - "8080:8080"
#     stop_grace_period: 1m30s
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#     deploy:
#       placement:
#         constraints: [node.role == manager]

# networks:
#   frontend:
#   backend:

# volumes:
#   db-data: